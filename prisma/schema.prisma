generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                  @id @default(autoincrement())
  loginId           String               @unique
  password          String
  phoneNumber       String
  nickname          String
  birthYear         String
  gender            String
  emailIndex        String
  subscribeEmail    String               @unique
  subscribePassword String               
  createdAt         DateTime             @default(now())
  industry          Industry?            @relation(fields: [industryId], references: [id])
  industryId        Int?
  interests         InterestsOnUsers[]
  newsletters       NewslettersOnUsers[]
  articles          Article[]
  bookmarks         Bookmark[]
}

model Newsletter {
  id                Int                  @id @default(autoincrement())
  brandName         String               @unique
  firstDescription  String?
  secondDescription String?
  detailDescription String?
  publicationCycle  String?
  subscribeUrl      String?
  previewUrl        String?
  imageUrl          String?
  brandEmail        String               @unique
  secondEmail       String               @unique
  thirdEmail        String               @unique
  doubleCheck       Boolean              @default(false)
  temporaryMiss     Boolean              @default(false)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  users             NewslettersOnUsers[]
  articles          Article[]
  industries        Industry[]
  interests         Interest[]
  days              Day[]
}

model Article {
  id           Int        @id @default(autoincrement())
  title        String
  body         String     @db.LongText
  firstTwoBody String?    @db.LongText
  plainBody    String?    @db.LongText
  date         DateTime
  publishYear  Int?
  publishMonth Int
  publishDate  Int
  status       String     @default("Unread")
  isBookmarked Boolean    @default(false)
  isVisible    Boolean    @default(true)
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id])
  newsletterId Int
  bookmarks    Bookmark[]
}

model Industry {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]
  newsletters Newsletter[]
}

model Interest {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  users       InterestsOnUsers[]
  newsletters Newsletter[]
}

model Day {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  newsletters Newsletter[]
}

model NewslettersOnUsers {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  newsletter   Newsletter @relation(fields: [newsletterId], references: [id])
  newsletterId Int
  status       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime?  @updatedAt    

  @@id([userId, newsletterId])
}

model InterestsOnUsers {
  user       User     @relation(fields: [userId], references: [id])
  userId     Int
  interest   Interest @relation(fields: [interestId], references: [id])
  interestId Int
  createdAt  DateTime @default(now())

  @@id([userId, interestId])
}

model Bookmark {
  user         User       @relation(fields: [userId], references: [id])
  userId       Int
  article      Article    @relation(fields: [articleId], references: [id])
  articleId    Int
  createdAt    DateTime   @default(now())

  @@id([userId, articleId])
}